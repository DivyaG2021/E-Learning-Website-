<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>HTML</title>
    @*<link href="~/css/HTML.css" rel="stylesheet" />
        <script src="https://kit.fontawesome.com/b99e675b6e.js"></script>*@
    <link href="~/css/FreeCourses.css" rel="stylesheet" />
    <link href="~/css/buttons.css" rel="stylesheet" />
    <link href="~/css/site.css" rel="stylesheet" />

</head>
<body>
    @*<header id="header">
            <a href="#" class="logo"><img src="images/logo.png" alt=""></a>
            <nav>
                <ul>
                    <li><a href="#home">home</a></li>
                    <li><a href="#home"></a>Courses</li>
                </ul>
            </nav>
            <div class="fas fa-bars"></div>
        </header>*@
    <div class="wrapper">
        <div class="sidebar">
            <h2>HTML Course</h2>
            <ul class="nav-item">
                <li><a asp-action="CSHARP1" target="_blank">C# Introduction</a></li>
                <li><a asp-action="CSHARP2" target="_parent">C# Syntax</a></li>
                <li><a asp-action="CSHARP3" target="_parent">C# Data Types</a></li>
                <li><a asp-action="CSHARP4" target="_parent">C# OOP</a></li>
                <li><a asp-controller="Quiz" asp-action="Index" target="_blank">Quiz</a></li>
                <li><a asp-controller="Feedbacks" asp-action="Create" target="_blank">Feedback</a></li>
            </ul>

        </div>
        <div class="main_content">
            @*<div class="header">Welcome to the C# Course</div>*@
            <div class="info">
                <div class="buttons">
                    <a asp-action="CSHARP3" target="_parent" class="previous">&laquo; Previous</a>
                    <a asp-controller="Quiz" asp-action="Index" target="_blank" class="next">Go to Quiz &raquo;</a>
                </div>
                <h2 style="text-align:center"><b>Welcome To C# course</b></h2>
                <hr />
                <h1 class="font-weight-bold">C# - What is OOP?</h1>
                <p>OOP stands for Object-Oriented Programming.</p>
                <div>Procedural programming is about writing procedures or methods that perform operations on the data, while object-oriented programming is about creating objects that contain both data and methods.</div>
                <p>Object-oriented programming has several advantages over procedural programming:</p>
                <ul>
                    <li>OOP is faster and easier to execute</li>
                    <li>OOP provides a clear structure for the programs</li>
                    <li>OOP helps to keep the C# code DRY "Don't Repeat Yourself", and makes the code easier to maintain, modify and debug</li>
                    <li>OOP makes it possible to create full reusable applications with less code and shorter development time</li>
                </ul>
                <br>
                <p><span class="font-weight-bold">Tip: </span>he "Don't Repeat Yourself" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it.</p>
                <h1 class="font-weight-bold">C# - What are Classes and Objects?</h1><br>
                <p>Classes and objects are the two main aspects of object-oriented programming.</p>
                <p>
                    So, a class is a template for objects, and an object is an instance of a class. When the individual objects are created, they inherit all the variables and methods from the class.
                </p><br>
                <h1 class="font-weight-bold">Classes and Objects</h1><br>
                <p>Everything in C# is associated with classes and objects, along with its attributes and methods. For example: in real life, a car is an object. The car has attributes, such as weight and color, and methods, such as drive and brake.</p>
                <p>A Class is like an object constructor, or a "blueprint" for creating objects.</p>
                <br>
                <h1 class="font-weight-bold">Create a Class</h1><br>
                <p>To create a class, use the <span class="text-danger" style="background-color:lightgray">class</span> keyword:</p>
                <br>
                <pre>
                   class Car 
                   {
                       string color = "red";
                   }
                </pre>
                <br>
                <h1 class="font-weight-bold">Create an Object</h1><br>
                <p>An object is created from a class. We have already created the class named <span class="text-danger" style="background-color:lightgray">Car</span>, so now we can use this to create objects.</p>
                <p>To create an object of <span class="text-danger" style="background-color:lightgray">Car,</span> specify the class name, followed by the object name, and use the keyword <span class="text-danger" style="background-color:lightgray">new:</span></p><br>
                <pre>
class Car 
{
  string color = "red";

  static void Main(string[] args)
  {
    Car myObj = new Car();
    Console.WriteLine(myObj.color);
  }
}
</pre>

                <div class="buttons">
                    <a asp-action="CSHARP3" target="_parent" class="previous">&laquo; Previous</a>
                    <a asp-controller="Quiz" asp-action="Index" target="_blank" class="next">Go to Quiz &raquo;</a>
                </div>
            </div>

        </div>
    </div>
</body>
</html>